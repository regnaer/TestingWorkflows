name: Update Sub-Issues Iteration

on:
  issue_comment:
    types: [created]
    
jobs:
  update-sub-issues-iteration:
    runs-on: ubuntu-latest
    if: github.event.comment.body == 'update tasks'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up GitHub CLI
      uses: cli/setup-gh@v1
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Get parent issue data
      id: get-parent-issue
      run: |
        PARENT_ISSUE_NUMBER="${{ github.event.issue.number }}"
        REPO_NAME="${{ github.repository }}"
        
        ISSUE_ID=$(gh issue view "$PARENT_ISSUE_NUMBER" --json id -q '.id')
        
        PROJECTV2_ITEM_ID=$(gh api graphql -f query='query { node(id: "$ISSUE_ID") { ... on Issue { projectItems(first: 1) { nodes { id project { id number } fields(first: 100) { nodes { ... on ProjectV2ItemFieldSingleSelect { name field { ... on ProjectV2Field { id } } option { id } } } } } } } }' | jq -r '.data.node.projectItems.nodes[0].id')

        if [[ -z "$PROJECTV2_ITEM_ID" ]]; then
          echo "::error::Issue not found in a ProjectV2."
          exit 1
        fi

        ITERATION_ID=$(gh api graphql -f query='query { node(id: "$PROJECTV2_ITEM_ID") { ... on ProjectV2Item { fields(first:100) { nodes { ... on ProjectV2ItemFieldSingleSelect { name field { ... on ProjectV2Field { id } } option { id } } } } } }' | jq -r '.data.node.fields.nodes[] | select(.name == "sprint").option.id')

        if [[ -z "$ITERATION_ID" ]]; then
          echo "::error::Iteration (sprint) field not found or not set."
          exit 1
        fi
        
        PROJECT_ID=$(gh api graphql -f query='query { node(id: "$PROJECTV2_ITEM_ID") { ... on ProjectV2Item { project { id } } } }' | jq -r '.data.node.project.project.id')

        echo "::set-output name=issue_id::$ISSUE_ID"
        echo "::set-output name=project_id::$PROJECT_ID"
        echo "::set-output name=iteration_id::$ITERATION_ID"

    - name: Get sub-issues and update iterations
      run: |
        PARENT_ISSUE_NUMBER="${{ github.event.issue.number }}"
        PROJECT_ID="${{ steps.get-parent-issue.outputs.project_id }}"
        ITERATION_ID="${{ steps.get-parent-issue.outputs.iteration_id }}"
        
        SUB_ISSUES=$(gh api issues/$PARENT_ISSUE_NUMBER/sub-issues --json number,state,id -q '.[].id' | jq -r '.[]')

        if [[ -z "$SUB_ISSUES" ]]; then
          echo "::notice::No sub-issues found."
          exit 0
        fi
        
        echo "$SUB_ISSUES" | jq -c '.[]' | while read -r SUB_ISSUE_ID; do
          SUB_ISSUE_STATE=$(gh issue view "$SUB_ISSUE_ID" --json state -q '.state')
          if [ "$SUB_ISSUE_STATE" == "OPEN" ]; then
            PROJECTV2_SUB_ITEM_ID=$(gh api graphql -f query='query { node(id: "$SUB_ISSUE_ID") { ... on Issue { projectItems(first: 100) { nodes { id project { id number } } } } } }' | jq -r '.data.node.projectItems.nodes[0].id')

            if [[ -z "$PROJECTV2_SUB_ITEM_ID" ]]; then
              echo "::warning::Sub-issue $SUB_ISSUE_ID not found in a ProjectV2."
              continue
            fi
            
            gh api graphql -f query='mutation { updateProjectV2ItemFieldValue(input: { projectId: "'"$PROJECT_ID"'", itemId: "'"$PROJECTV2_SUB_ITEM_ID"'", fieldId: "'"${{ steps.get-parent-issue.outputs.iteration_id | cut -d':' -f1 }}"'", value: { singleSelectOptionId: "'"${{ steps.get-parent-issue.outputs.iteration_id }}"'" } }) { clientMutationId } }'
          fi
        done

    - name: Error handling
      if: failure()
      run: |
        echo "An error occurred during the workflow execution."
        exit 1
