name: Update Sub-Issue Iterations

on:
  issue_comment:
    types: [created]

jobs:
  update_iterations:
    if: github.event.comment.body == 'update tasks'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install gh

      - name: Get parent issue's project ID and iteration ID
        id: get_project_info
        run: |
          ISSUE_NUMBER=$(echo ${{ github.event.issue.number }})
          REPO_OWNER=$(echo ${{ github.repository_owner }})
          REPO_NAME=$(echo ${{ github.event.repository.name }})

          # Get the project ID associated with the issue
          PROJECT_ID=$(gh issue view "$ISSUE_NUMBER" --repo "$REPO_OWNER/$REPO_NAME" --json projectItems --jq '.[0].project.id' --raw)
          echo "PROJECT_ID=$PROJECT_ID" >> "$GITHUB_ENV"

          # Get the iteration ID from the project
          ITERATION_ID=$(gh issue view "$ISSUE_NUMBER" --repo "$REPO_OWNER/$REPO_NAME" --json projectItems --jq '.[0].fieldValues.nodes[] | select(.field.name == "Iteration") | .id' --raw)
          echo "ITERATION_ID=$ITERATION_ID" >> "$GITHUB_ENV"
          echo "::set-output name=iteration_id::$ITERATION_ID"

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get sub-issues (GraphQL)
        id: get_sub_issues
        run: |
          PARENT_ISSUE_NUMBER=$(echo ${{ github.event.issue.number }})
          REPO_OWNER=$(echo ${{ github.repository_owner }})
          REPO_NAME=$(echo ${{ github.event.repository.name }})

          QUERY='
          query GetSubIssues($owner: String!, $repo: String!, $issueNumber: Int!) {
            repository(owner: $owner, name: $repo) {
              issue(number: $issueNumber) {
                id
                body
                children(first: 100) {
                  nodes {
                    ... on Issue {
                      number
                      state
                    }
                  }
                }
              }
            }
          }
          '

          RESPONSE=$(gh api graphql --paginate -f query="$QUERY" -f owner="$REPO_OWNER" -f repo="$REPO_NAME" -f issueNumber="$PARENT_ISSUE_NUMBER")

          OPEN_SUB_ISSUES=$(echo "$RESPONSE" | jq '.data.repository.issue.children.nodes[] | select(.state == "OPEN") | .number' | jq -c .)
          echo "OPEN_SUB_ISSUES=$OPEN_SUB_ISSUES" >> "$GITHUB_ENV"
          echo "::set-output name=open_sub_issues::$OPEN_SUB_ISSUES"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update sub-issue iterations
        run: |
          if [ -z "$OPEN_SUB_ISSUES" ]; then
            echo "No open sub-issues found. Skipping update."
            exit 0
          fi

          PARENT_ISSUE_NUMBER=$(echo ${{ github.event.issue.number }})
          REPO_OWNER=$(echo ${{ github.repository_owner }})
          REPO_NAME=$(echo ${{ github.event.repository.name }})
          ITERATION_ID=$(echo ${{ env.ITERATION_ID }})

          # Remove brackets and spaces from the OPEN_SUB_ISSUES array
          OPEN_SUB_ISSUES=$(echo "$OPEN_SUB_ISSUES" | tr -d '[]')
          OPEN_SUB_ISSUES=$(echo "$OPEN_SUB_ISSUES" | sed 's/ //g')

          # Iterate through the sub-issues and update their iteration
          IFS=','
          read -r -a SUB_ISSUE_ARRAY <<< "$OPEN_SUB_ISSUES"

          for SUB_ISSUE_NUMBER in "${SUB_ISSUE_ARRAY[@]}"; do
            if [ -n "$SUB_ISSUE_NUMBER" ]; then
              echo "Updating iteration for sub-issue: $SUB_ISSUE_NUMBER to iteration id: $ITERATION_ID"
              gh issue edit "$REPO_OWNER/$REPO_NAME#$SUB_ISSUE_NUMBER" --project-add "$PROJECT_ID" --project-field "Iteration"="$ITERATION_ID" || echo "Failed to update sub-issue: $SUB_ISSUE_NUMBER"
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
