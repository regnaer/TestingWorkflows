name: Update Tasks

on:
  issue_comment:
    types: [created]

jobs:
  update-tasks:
    if: github.event.comment.body == 'update tasks'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up GitHub CLI
      uses: cli/setup-gh@v2 # Use cli/setup-gh instead of actions/setup-gh
      with:
         github-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Get parent issue iteration ID
      id: get-iteration-id
      run: |
        issue_id=$(gh issue view ${{ github.event.issue.number }} --json id -q .id)
        project_id=$(gh issue view ${{ github.event.issue.number }} --json projectsV2Items -q '.projectsV2Items[0].project.id')
        iteration_field_id=$(gh api graphql -F query='
          query {
            node(id: "$project_id") {
              ... on ProjectV2 {
                fields(first: 100) {
                  nodes {
                    ... on ProjectV2IterationField {
                      id
                      name
                      iterations(first: 100) {
                        nodes {
                          id
                          title
                        }
                      }
                    }
                  }
                }
              }
            }
          }' -F project_id="$project_id" -q '.data.node.fields.nodes | map(select(.name == "sprint")) | .[0].id')
        
        iteration_id=$(gh api graphql -F query='
          query {
            node(id: "$project_id") {
              ... on ProjectV2 {
                items(first: 100) {
                  nodes {
                    content {
                      ... on Issue {
                        id
                        title
                      }
                    }
                    fieldValues(first: 100) {
                      nodes {
                        ... on ProjectV2ItemFieldIterationValue {
                          field {
                            ... on ProjectV2IterationField {
                              id
                              name
                            }
                          }
                          duration
                          iterationId
                        }
                      }
                    }
                  }
                }
              }
            }
          }' -F project_id="$project_id" -q '.data.node.items.nodes | map(select(.content.id == "$issue_id")) | .[0].fieldValues.nodes | map(select(.field.id == "$iteration_field_id")) | .[0].iterationId')

        echo "iteration_id=$iteration_id" >> $GITHUB_ENV

    - name: Get open sub-issues
      id: get-open-sub-issues
      run: |
        open_sub_issues=$(gh api graphql -F query='
          query {
            node(id: "$issue_id") {
              ... on Issue {
                id
                title
                timelineItems(itemTypes: [TRACKED_BY_EVENT]) {
                  nodes {
                    ... on TrackedByEvent {
                      subject {
                        ... on Issue {
                          id
                          state
                        }
                      }
                    }
                  }
                }
              }
            }
          }' -F issue_id="$issue_id" -q '.data.node.timelineItems.nodes | map(select(.subject.state == "OPEN")) | .[].subject.id')

        echo "open_sub_issues=$open_sub_issues" >> $GITHUB_ENV

    - name: Update sub-issues iteration
      run: |
        for sub_issue_id in $open_sub_issues
        do
          gh api graphql -F query='
            mutation($sub_issue_id: ID!, $iteration_field_id: ID!, $iteration_id: ID!) {
              updateProjectV2ItemFieldValue(
                input: {
                  projectId: "$project_id"
                  itemId: "$sub_issue_id"
                  fieldId: "$iteration_field_id"
                  value: {
                    iterationId: "$iteration_id"
                  }
                }
              ) {
                projectV2Item {
                  id
                }
              }
            }' -F sub_issue_id="$sub_issue_id" -F iteration_field_id="$iteration_field_id" -F iteration_id="$iteration_id"
        done

    - name: Error handling
      if: failure()
      run: echo "An error occurred during the workflow execution."
