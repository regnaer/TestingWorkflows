name: Update Sub-issue Sprints

on:
  issue_comment:
    types: [created]

jobs:
  update_sprints:
    if: github.event.comment.body == 'update tasks'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install @octokit/graphql

      - name: Get issue sprint
        id: get-sprint
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
        run: |
          const { graphql } = require('@octokit/graphql');

          const query = `
            query {
              repository(owner: "${process.env.OWNER}", name: "${process.env.REPO}") {
                issue(number: ${process.env.ISSUE_NUMBER}) {
                  projectItems(first: 100, states: [OPEN]) {
                    nodes {
                      project {
                        number
                      }
                    }
                  }
                }
              }
              user(login: "${process.env.OWNER}") {
                projectV2(number: 2) {
                    items(first: 20) {
                      nodes {
                        content {
                          ... on Issue {
                            url
                            title
                            state
                            assignees(first: 10) {
                              nodes {
                                login
                              }
                            }
                            labels(first: 10) {
                              nodes {
                                name
                              }
                            }
                            updatedAt
                          }
                        }
                        sprint: fieldValueByName(name: "Sprint") {
                          ... on ProjectV2ItemFieldIterationValue {
                            duration
                            startDate
                            title
                          }
                        }
                      }
                      pageInfo {
                        hasNextPage
                        endCursor
                      }
                    }
                  }
                }
              }
            }
          `;

          graphql({
            query: query,
            headers: {
              authorization: `token ${process.env.GITHUB_TOKEN}`,
            },
          }).then((result) => {
            const sprint = result.user.projectV2.items.nodes[0].sprint;
            console.log('Sprint:', sprint);
            core.setOutput('sprint', JSON.stringify(sprint));
          }).catch(error => {
            console.error('Error fetching sprint:', error);
            process.exit(1);
          });

      - name: Get sub-issues
        id: get-sub-issues
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
        run: |
          const { graphql } = require('@octokit/graphql');

          const query = `
            query GetSubIssues($owner: String!, $repo: String!, $issueNumber: Int!) {
              repository(owner: $owner, name: $repo) {
                issue(number: $issueNumber) {
                  body
                  comments(first: 100) {
                    nodes {
                      body
                      author {
                        login
                      }
                    }
                  }
                }
              }
            }
          `;

          graphql({
            query: query,
            owner: process.env.OWNER,
            repo: process.env.REPO,
            issueNumber: parseInt(process.env.ISSUE_NUMBER),
            headers: {
              authorization: `token ${process.env.GITHUB_TOKEN}`,
            },
          }).then((result) => {
            const issueBody = result.repository.issue.body;
            const comments = result.repository.issue.comments.nodes;
            const subIssueRegex = /\[(x|\s)?\]\s*#(\d+)/g;
            let match;
            const subIssues = [];

            // Extract sub-issue numbers from issue body
            while ((match = subIssueRegex.exec(issueBody)) !== null) {
              const subIssueNumber = parseInt(match[2], 10);
              subIssues.push(subIssueNumber);
            }

            // Extract sub-issue numbers from comments (if needed)
            for (const comment of comments) {
              while ((match = subIssueRegex.exec(comment.body)) !== null) {
                const subIssueNumber = parseInt(match[2], 10);
                if (!subIssues.includes(subIssueNumber)) {
                  subIssues.push(subIssueNumber);
                }
              }
            }

            console.log('Sub-issues:', subIssues);
            core.setOutput('sub_issues', JSON.stringify(subIssues));
          }).catch(error => {
            console.error('Error fetching sub-issues:', error);
            process.exit(1);
          });

      - name: Update sub-issue sprints
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
          SPRINT: ${{ steps.get-sprint.outputs.sprint }}
        run: |
          const { graphql } = require('@octokit/graphql');
          const subIssues = JSON.parse(process.env.SUB_ISSUES);
          const sprint = JSON.parse(process.env.SPRINT);
          const owner = process.env.OWNER;
          const repo = process.env.REPO;

          async function updateSubIssueSprint(issueNumber, sprint) {
            // Fetch the project ID from the issue
            const projectQuery = `
              query {
                repository(owner: "${owner}", name: "${repo}") {
                  issue(number: ${issueNumber}) {
                    projectItems(first: 100, states: [OPEN]) {
                      nodes {
                        project {
                          id
                        }
                      }
                    }
                  }
                }
              }
            `;
          
            const projectResult = await graphql({
              query: projectQuery,
              headers: {
                authorization: `token ${process.env.GITHUB_TOKEN}`,
              },
            });
          
            const projectId = projectResult.repository.issue.projectItems.nodes[0].project.id;
            console.log("projectId", projectId)

            // Fetch the content ID of the issue
            const contentQuery = `
              query {
                repository(owner: "${owner}", name: "${repo}") {
                  issue(number: ${issueNumber}) {
                    id
                  }
                }
              }
            `;

            const contentResult = await graphql({
              query: contentQuery,
              headers: {
                authorization: `token ${process.env.GITHUB_TOKEN}`,
              },
            });

            const contentId = contentResult.repository.issue.id;
            console.log("contentId", contentId)

            const mutation = `
              mutation {
                addProjectV2ItemById(input: {projectId: "${projectId}" , contentId: "${contentId}"}) {
                  clientMutationId
                }
              }
            `;

            try {
              const result = await graphql({
                query: mutation,
                headers: {
                  authorization: `token ${process.env.GITHUB_TOKEN}`,
                },
              });
              console.log(`Updated sprint for issue #${issueNumber}:`, result);
            } catch (error) {
              console.error(`Error updating sprint for issue #${issueNumber}:`, error);
            }
          }

          async function main() {
            for (const issueNumber of subIssues) {
              await updateSubIssueSprint(issueNumber, sprint);
            }
          }

          main();
