name: Update Sub-Issues Sprint Field

on:
  issue_comment:
    types: [created]

jobs:
  update-sub-issues:
    runs-on: ubuntu-latest
    if: github.event.comment.body == 'update tasks'
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install dependencies
        run: npm install @octokit/graphql

      - name: Get Issue Data
        id: get-issue-data
        run: |
          node <<EOF
          const { graphql } = require("@octokit/graphql");

          const issueNumber = process.env.GITHUB_EVENT.issue.number;
          const owner = process.env.GITHUB_REPOSITORY_OWNER;
          const repo = process.env.GITHUB_REPOSITORY.split("/")[1];
          const token = process.env.GITHUB_TOKEN;

          const query = `
          query($issueNumber: Int!, $owner: String!, $repo: String!) {
            repository(owner: $owner, name: $repo) {
              issue(number: $issueNumber) {
                id
                projectItems(first: 1) {
                  nodes {
                    id
                    fieldValues(first: 10) {
                      nodes {
                        projectField {
                          id
                          name
                        }
                        value
                      }
                    }
                  }
                }
              }
            }
          }
          `;

          graphql({
            query,
            variables: {
              issueNumber,
              owner,
              repo
            },
            headers: {
              authorization: `token ${token}`
            }
          }).then(result => {
            const issueId = result.repository.issue.id;
            const sprintField = result.repository.issue.projectItems.nodes[0].fieldValues.nodes.find(field => field.projectField.name === 'Sprint');
            const sprintValue = sprintField ? sprintField.value : null;

            console.log(`issue-id=${issueId}`);
            console.log(`sprint-value=${sprintValue}`);
          }).catch(error => {
            console.error(error);
            process.exit(1);
          });
          EOF
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_EVENT: ${{ toJson(github.event) }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Sub-Issues
        id: get-sub-issues
        run: |
          node <<EOF
          const { graphql } = require("@octokit/graphql");

          const issueId = process.env.ISSUE_ID;
          const owner = process.env.GITHUB_REPOSITORY_OWNER;
          const repo = process.env.GITHUB_REPOSITORY.split("/")[1];
          const token = process.env.GITHUB_TOKEN;

          const query = `
          query($issueId: ID!) {
            node(id: $issueId) {
              ... on Issue {
                timelineItems(itemTypes: [CONNECTED_EVENT], first: 100) {
                  nodes {
                    ... on ConnectedEvent {
                      subject {
                        ... on Issue {
                          id
                          state
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          `;

          graphql(query, {
            issueId,
            headers: {
              authorization: `token ${token}`
            }
          }).then(result => {
            const subIssues = result.node.timelineItems.nodes
              .filter(event => event.subject.state === 'OPEN')
              .map(event => event.subject.id);

            console.log(`::set-output name=sub-issues::${subIssues.join(',')}`);
          }).catch(error => {
            console.error(error);
            process.exit(1);
          });
          EOF
        env:
          ISSUE_ID: ${{ steps.get-issue-data.outputs.issue-id }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}

      - name: Update Sub-Issues
        run: |
          node <<EOF
          const { graphql } = require("@octokit/graphql");

          const subIssues = process.env.SUB_ISSUES.split(',');
          const sprintValue = process.env.SPRINT_VALUE;
          const token = process.env.GITHUB_TOKEN;
          const projectId = "PVT_kwHOAYT8e84A0x6m";
          const sprintFieldId = "PVTIF_lAHOAYT8e84A0x6mzgqW4r0";

          const mutation = `
          mutation($subIssueId: ID!, $sprintFieldId: ID!, $sprintValue: String!) {
            updateProjectNextItemField(input: {projectId: $projectId, itemId: $subIssueId, fieldId: $sprintFieldId, value: $sprintValue}) {
              projectNextItem {
                id
              }
            }
          }
          `;

          for (const subIssueId of subIssues) {
            graphql(mutation, {
              subIssueId,
              sprintFieldId,
              sprintValue,
              headers: {
                authorization: `token ${token}`
              }
            }).then(result => {
              console.log(`Updated sub-issue ${subIssueId}`);
            }).catch(error => {
              console.error(`Failed to update sub-issue ${subIssueId}: ${error.message}`);
            });
          }
          EOF
        env:
          SUB_ISSUES: ${{ steps.get-sub-issues.outputs.sub-issues }}
          SPRINT_VALUE: ${{ steps.get-issue-data.outputs.sprint-value }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
