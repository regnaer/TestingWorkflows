name: Generate Project Issues Report

on:
  workflow_dispatch:
    inputs:
      project_node_id:
        description: 'The Node ID of the ProjectV2 board (e.g., PVT_...)'
        required: true
        type: string
      output_filename:
        description: 'Filename for the CSV report (e.g., report.csv)'
        required: false
        type: string
        default: 'project_issues_report.csv'

jobs:
  build-report:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch Project Data via GraphQL (with Pagination)
        id: fetch_data
        env:
          GH_TOKEN: ${{ secrets.GH_PAT_PROJECTS }}
          PROJECT_ID: ${{ inputs.project_node_id }}
        run: |
          echo "Fetching data for Project ID: $PROJECT_ID"

          # Initialize loop variables
          has_next_page=true
          end_cursor=null
          > project_data.json

          # Loop to handle pagination
          while [ "$has_next_page" = "true" ]; do
            echo "Running GraphQL query with endCursor: $end_cursor"

            # Execute GraphQL query with pagination
            response=$(gh api graphql -F projectId="$PROJECT_ID" -F endCursor="$end_cursor" -f query='
            query GetProjectItemsAndIssueDetails($projectId: ID!, $endCursor: String) {
              node(id: $projectId) {
                ... on ProjectV2 {
                  items(first: 100, after: $endCursor) {
                    nodes {
                      id
                      fieldValues(first: 20) {
                        nodes {
                          ... on ProjectV2ItemFieldTextValue {
                            text
                            field {
                              name
                            }
                          }
                          ... on ProjectV2ItemFieldDateValue {
                            date
                            field {
                              name
                            }
                          }
                          ... on ProjectV2ItemFieldNumberValue {
                            number
                            field {
                              name
                            }
                          }
                          ... on ProjectV2ItemFieldSingleSelectValue {
                            name
                            field {
                              name
                            }
                          }
                          ... on ProjectV2ItemFieldIterationValue {
                            title
                            startDate
                            duration
                            field {
                              name
                            }
                          }
                          ... on ProjectV2ItemFieldReviewerValue {
                            reviewers {
                              nodes {
                                login
                              }
                            }
                            field {
                              name
                            }
                          }
                        }
                      }
                      content {
                        ... on Issue {
                          id
                          number
                          title
                          state
                          createdAt
                          updatedAt
                          closedAt
                          url
                          author {
                            login
                          }
                          assignees(first: 10) {
                            nodes {
                              login
                            }
                          }
                          labels(first: 20) {
                            nodes {
                              name
                            }
                          }
                          milestone {
                            title
                          }
                          repository {
                            nameWithOwner
                          }
                        }
                      }
                    }
                    pageInfo {
                      endCursor
                      hasNextPage
                    }
                  }
                }
              }
            }

            # Check for query success and log response
            if [ $? -ne 0 ]; then
              echo "ERROR: GraphQL query failed."
              echo "Response:"
              echo "$response"
              exit 1
            fi

            # Append response to project_data.json
            echo "$response" | jq '.data.node.items.nodes' >> project_data.json

            # Update pagination variables
            has_next_page=$(echo "$response" | jq -r '.data.node.items.pageInfo.hasNextPage')
            end_cursor=$(echo "$response" | jq -r '.data.node.items.pageInfo.endCursor')
          done

          echo "Successfully fetched all project data."

      - name: Process Data and Generate CSV
        id: generate_csv
        run: |
          # Define CSV Header
          header='"Issue Number","Issue Title","State","Repository","URL","Created At","Updated At","Closed At","Author","Assignees","Labels","Milestone","Sprint","Status","Team","Field Type"'

          # Use jq to transform JSON to CSV rows
          csv_data=$(jq -r '
            . | .[] | select(.content != null and .content.__typename == "Issue") | [
              .content.number // "",
              .content.title // "",
              .content.state // "",
              .content.repository.nameWithOwner // "",
              .content.url // "",
              .content.createdAt // "",
              .content.updatedAt // "",
              .content.closedAt // "",
              .content.author.login // "",
              (.content.assignees.nodes | map(.login) | join(",")) // "",
              (.content.labels.nodes | map(.name) | join(",")) // "",
              .content.milestone.title // "",
              (.fieldValues.nodes | map(select(.field.name? == "Sprint")) | first | .title // ""),
              (.fieldValues.nodes | map(select(.field.name? == "Status")) | first | .name // ""),
              (.fieldValues.nodes | map(select(.field.name? == "Team")) | first | .name // ""),
              (.fieldValues.nodes | map(.__typename | tostring) | join("|")) // "" # Include type debugging
            ] | @csv
          ' project_data.json)

          # Combine header and data, save to file
          output_file="${{ inputs.output_filename }}"
          echo "$header" > "$output_file"
          if [[ -n "$csv_data" ]]; then
            echo "$csv_data" >> "$output_file"
          fi

          echo "CSV report generated: $output_file"
          echo "::set-output name=report_path::$output_file"

      - name: Upload CSV Report Artifact
        uses: actions/upload-artifact@v4
        with:
          name: project-issues-report
          path: ${{ steps.generate_csv.outputs.report_path }}
