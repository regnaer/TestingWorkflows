name: Monthly Completed

on:
  workflow_dispatch:

jobs:
  find_closed_issues:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'

    - name: Install dependencies
      run: npm install node-fetch csv-writer

    - name: Find closed issues within 30 days
      id: find_issues
      continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        node -e '
        const fetch = require("node-fetch");
        const { createObjectCsvWriter } = require("csv-writer");
        const fs = require("fs");
        const owner = "regnaer";
        const repo = "TestingWorkflows";
        const projectNumber = 2;

        async function getClosedIssues() {
          const query = `
            query {
              search(query: "repo:${owner}/${repo} is:issue is:closed closed:>=${new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split("T")[0]}", type: ISSUE, first: 100) {
                nodes {
                  ... on Issue {
                    number
                    title
                    url
                  }
                }
              }
            }
          `;
          try {
            const response = await fetch("https://api.github.com/graphql", {
              method: "POST",
              headers: {
                "Authorization": "Bearer " + process.env.GITHUB_TOKEN,
                "Content-Type": "application/json"
              },
              body: JSON.stringify({ query })
            });
            const data = await response.json();
            return data.data.search.nodes;
          } catch (error) {
            console.error("Error fetching closed issues:", error);
            process.exit(1);
          }
        }

        async function getProjectFields(issue) {
          try {
            const projectResponse = await fetch(`https://api.github.com/projects/${projectNumber}`, {
              headers: {
                "Authorization": "Bearer " + process.env.GITHUB_TOKEN,
                "Accept": "application/vnd.github.inertia-preview+json"
              }
            });
            const project = await projectResponse.json();

            const columnsResponse = await fetch(project.columns_url, {
              headers: {
                "Authorization": "Bearer " + process.env.GITHUB_TOKEN,
                "Accept": "application/vnd.github.inertia-preview+json"
              }
            });
            const columns = await columnsResponse.json();

            let fields = {};
            for (const column of columns) {
              const cardsResponse = await fetch(column.cards_url, {
                headers: {
                  "Authorization": "Bearer " + process.env.GITHUB_TOKEN,
                  "Accept": "application/vnd.github.inertia-preview+json"
                }
              });
              const cards = await cardsResponse.json();
              for (const card of cards.filter(card => card.content_url.includes(`/issues/${issue.number}`))) {
                fields[column.name] = card.note;
              }
            }
            return fields;
          } catch (error) {
            console.error(`Error fetching project fields for issue #${issue.number}:`, error);
            return {};
          }
        }

        async function generateReport() {
          try {
            const issues = await getClosedIssues();
            const records = await Promise.all(issues.map(async issue => {
              const fields = await getProjectFields(issue);
              return {
                number: issue.number,
                title: issue.title,
                url: issue.url,
                ...fields,
              };
            }));
            const csvWriter = createObjectCsvWriter({
              path: "issues_report.csv",
              header: [
                { id: "number", title: "Number" },
                { id: "title", title: "Title" },
                { id: "url", title: "URL" },
                ...Object.keys(records[0] || {}).filter(key => !["number", "title", "url"].includes(key)).map(field => ({ id: field, title: field })),
              ]
            });
            await csvWriter.writeRecords(records);
            fs.writeFileSync("issues_report.json", JSON.stringify(records, null, 2));
          } catch (error) {
            console.error("Error generating report:", error);
            process.exit(1);
          }
        }

        generateReport();
        '

    - name: Upload CSV report
      if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: issues-report-csv
        path: issues_report.csv

    - name: Upload JSON report
      if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: issues-report-json
        path: issues_report.json
